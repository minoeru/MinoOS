     1                                  ; naskfunc
     2                                  ; TAB=4
     3                                  
     4                                  ;[FORMAT "WCOFF"]				; オブジェクトファイルを作るモード ; NASMではエラーが出るのでこの行削除
     5                                  [BITS 32]						; 32ビットモード用の機械語を作らせる
     6                                  
     7                                  
     8                                  ; オブジェクトファイルのための情報
     9                                  
    10                                  ;[FILE "naskfunc.nas"]			; ソースファイル名情報 ; NASMではエラーが出るのでこの行削除
    11                                  
    12                                  		GLOBAL	io_hlt			; このプログラムに含まれる関数名;NASMではエラーが出るので修正
    13                                  		GLOBAL	io_cli,io_sti,io_stihlt	;間をあけない
    14                                  		GLOBAL	io_in8,io_in16,io_in32
    15                                  		GLOBAL	io_out8,io_out16,io_out32
    16                                  		GLOBAL	io_load_eflags,io_store_eflags
    17                                  		GLOBAL	load_gdtr,load_idtr
    18                                  		GLOBAL  load_cr0, store_cr0
    19                                  		GLOBAL	asm_inthandler21,asm_inthandler27,asm_inthandler2c
    20                                  		GLOBAL  memtest_sub
    21                                  		EXTERN	inthandler21,inthandler27,inthandler2c
    22                                  
    23                                  
    24                                  
    25                                  ; 以下は実際の関数
    26                                  
    27                                  [SECTION .text]		; オブジェクトファイルではこれを書いてからプログラムを書く
    28                                  
    29                                  io_hlt:	; void io_hlt(void);	; NASMではエラーが出るので修正
    30 00000000 F4                      		HLT
    31 00000001 C3                      		RET
    32                                  
    33                                  io_cli:	; void io_cli(void);	;割り込み禁止
    34 00000002 FA                      		CLI
    35 00000003 C3                      		RET
    36                                  
    37                                  io_sti:	; void io_sti(void);	;割り込み許可
    38 00000004 FB                      		STI
    39 00000005 C3                      		RET
    40                                  
    41                                  io_stihlt:	; void io_stihlt(void);
    42 00000006 FB                      		STI
    43 00000007 F4                      		HLT
    44 00000008 C3                      		RET
    45                                  
    46                                  io_in8: ; int io_in8(int port);
    47 00000009 8B542404                		MOV		EDX,[ESP+4]		;port
    48 0000000D B800000000              		MOV 	EAX,0
    49 00000012 EC                      		IN 		AL,DX
    50 00000013 C3                      		RET
    51                                  
    52                                  io_in16: ; int io_in16(int port);
    53 00000014 8B542404                		MOV		EDX,[ESP+4]		;port
    54 00000018 B800000000              		MOV 	EAX,0
    55 0000001D EC                      		IN 		AL,DX
    56 0000001E C3                      		RET
    57                                  
    58                                  io_in32: ; int io_in32(int port);
    59 0000001F 8B542404                		MOV		EDX,[ESP+4]		;port
    60 00000023 EC                      		IN 		AL,DX
    61 00000024 C3                      		RET
    62                                  
    63                                  io_out8: ; void io_out8(int port, int data);
    64 00000025 8B542404                		MOV		EDX,[ESP+4] 	;port
    65 00000029 8A442408                		MOV		AL,[ESP+8]		;data
    66 0000002D EE                      		OUT		DX,AL
    67 0000002E C3                      		RET
    68                                  
    69                                  io_out16: ; void io_out16(int port, int data);
    70 0000002F 8B542404                		MOV 	EDX,[ESP+4]		;port
    71 00000033 8B442408                		MOV 	EAX,[ESP+8]		;data
    72 00000037 66EF                    		OUT		DX,AX
    73 00000039 C3                      		RET
    74                                  
    75                                  io_out32: ; void io_out32(int port, int data);
    76 0000003A 8B542404                		MOV		EDX,[ESP+4]
    77 0000003E 8B442408                		MOV		EAX,[ESP+8]
    78 00000042 EF                      		OUT		DX,EAX
    79 00000043 C3                      		RET
    80                                  
    81                                  io_load_eflags: ; int io_load_eflags(void);
    82 00000044 9C                      		PUSHFD					; PUSH EFLAGS
    83 00000045 58                      		POP		EAX
    84 00000046 C3                      		RET
    85                                  
    86                                  io_store_eflags: ; void io_store_eflags(int eflags);
    87 00000047 8B442404                		MOV		EAX,[ESP+4]
    88 0000004B 50                      		PUSH	EAX
    89 0000004C 9D                      		POPFD					;POP EFLAGSという意味
    90 0000004D C3                      		RET
    91                                  
    92                                  load_gdtr:		; void load_gdtr(int limit, int addr);
    93 0000004E 668B442404              		MOV		AX,[ESP+4]		; limit
    94 00000053 6689442406              		MOV		[ESP+6],AX
    95 00000058 0F01542406              		LGDT	[ESP+6]
    96 0000005D C3                      		RET
    97                                  
    98                                  load_idtr:		; void load_idtr(int limit, int addr);
    99 0000005E 668B442404              		MOV		AX,[ESP+4]		; limit
   100 00000063 6689442406              		MOV		[ESP+6],AX
   101 00000068 0F015C2406              		LIDT	[ESP+6]
   102 0000006D C3                      		RET
   103                                  
   104                                  load_cr0:		; int load_cr0(void);
   105 0000006E 0F20C0                  		MOV		EAX,CR0
   106 00000071 C3                      		RET
   107                                  
   108                                  store_cr0:		; void store_cr0(int cr0);
   109 00000072 8B442404                		MOV		EAX,[ESP+4]
   110 00000076 0F22C0                  		MOV		CR0,EAX
   111 00000079 C3                      		RET
   112                                  
   113                                  asm_inthandler21:
   114 0000007A 06                      		PUSH	ES
   115 0000007B 1E                      		PUSH	DS
   116 0000007C 60                      		PUSHAD
   117 0000007D 89E0                    		MOV		EAX,ESP
   118 0000007F 50                      		PUSH	EAX
   119 00000080 668CD0                  		MOV		AX,SS
   120 00000083 8ED8                    		MOV		DS,AX
   121 00000085 8EC0                    		MOV		ES,AX
   122 00000087 E8(00000000)            		CALL	inthandler21
   123 0000008C 58                      		POP		EAX
   124 0000008D 61                      		POPAD
   125 0000008E 1F                      		POP		DS
   126 0000008F 07                      		POP		ES
   127 00000090 CF                      		IRETD
   128                                  
   129                                  asm_inthandler27:
   130 00000091 06                      		PUSH	ES
   131 00000092 1E                      		PUSH	DS
   132 00000093 60                      		PUSHAD
   133 00000094 89E0                    		MOV		EAX,ESP
   134 00000096 50                      		PUSH	EAX
   135 00000097 668CD0                  		MOV		AX,SS
   136 0000009A 8ED8                    		MOV		DS,AX
   137 0000009C 8EC0                    		MOV		ES,AX
   138 0000009E E8(00000000)            		CALL	inthandler27
   139 000000A3 58                      		POP		EAX
   140 000000A4 61                      		POPAD
   141 000000A5 1F                      		POP		DS
   142 000000A6 07                      		POP		ES
   143 000000A7 CF                      		IRETD
   144                                  
   145                                  asm_inthandler2c:
   146 000000A8 06                      		PUSH	ES
   147 000000A9 1E                      		PUSH	DS
   148 000000AA 60                      		PUSHAD
   149 000000AB 89E0                    		MOV		EAX,ESP
   150 000000AD 50                      		PUSH	EAX
   151 000000AE 668CD0                  		MOV		AX,SS
   152 000000B1 8ED8                    		MOV		DS,AX
   153 000000B3 8EC0                    		MOV		ES,AX
   154 000000B5 E8(00000000)            		CALL	inthandler2c
   155 000000BA 58                      		POP		EAX
   156 000000BB 61                      		POPAD
   157 000000BC 1F                      		POP		DS
   158 000000BD 07                      		POP		ES
   159 000000BE CF                      		IRETD
   160                                  
   161                                  memtest_sub: ; unsigned int memtest_sub(unsigned int start, unsigned int end)
   162 000000BF 57                      		PUSH	EDI			;(EBX, ESI, EDIも使いたいので)
   163 000000C0 56                      		PUSH	ESI
   164 000000C1 53                      		PUSH	EBX
   165 000000C2 BE55AA55AA              		MOV		ESI,0xaa55aa55			; pat0 = 0xaa55aa55;
   166 000000C7 BFAA55AA55              		MOV		EDI,0x55aa55aa			; pat1 = 0x55aa55aa;
   167 000000CC 8B442410                		MOV		EAX,[ESP+12+4]			; i = start;
   168                                  mts_loop:
   169 000000D0 89C3                    		MOV		EBX,EAX
   170 000000D2 81C3FC0F0000            		ADD		EBX,0xffc				; p = i + 0xffc;
   171 000000D8 8B13                    		MOV		EDX,[EBX]				; old = *p;
   172 000000DA 8933                    		MOV		[EBX],ESI				; *p = pat0;
   173 000000DC 8333FF                  		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   174 000000DF 3B3B                    		CMP		EDI,[EBX]				; if (*p != pat1) goto fin;
   175 000000E1 7518                    		JNE		mts_fin
   176 000000E3 8333FF                  		XOR		DWORD [EBX],0xffffffff	; *p ^= 0xffffffff;
   177 000000E6 3B33                    		CMP		ESI,[EBX]				; if (*p != pat0) goto fin;
   178 000000E8 7511                    		JNE		mts_fin
   179 000000EA 8913                    		MOV		[EBX],EDX				; *p = old;
   180 000000EC 0500100000              		ADD		EAX,0x1000				; i += 0x1000;
   181 000000F1 3B442414                		CMP		EAX,[ESP+12+8]			; if (i <= end) goto mts_loop;
   182 000000F5 76D9                    		JBE		mts_loop
   183 000000F7 5B                      		POP		EBX
   184 000000F8 5E                      		POP		ESI
   185 000000F9 5F                      		POP		EDI
   186 000000FA C3                      		RET
   187                                  mts_fin:
   188 000000FB 8913                    		MOV		[EBX],EDX				; *p = old;
   189 000000FD 5B                      		POP		EBX
   190 000000FE 5E                      		POP		ESI
   191 000000FF 5F                      		POP		EDI
   192 00000100 C3                      		RET
