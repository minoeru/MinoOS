     1                                  ; naskfunc
     2                                  ; TAB=4
     3                                  
     4                                  ;[FORMAT "WCOFF"]				; オブジェクトファイルを作るモード ; NASMではエラーが出るのでこの行削除
     5                                  [BITS 32]						; 32ビットモード用の機械語を作らせる
     6                                  
     7                                  
     8                                  ; オブジェクトファイルのための情報
     9                                  
    10                                  ;[FILE "naskfunc.nas"]			; ソースファイル名情報 ; NASMではエラーが出るのでこの行削除
    11                                  
    12                                  		GLOBAL	io_hlt			; このプログラムに含まれる関数名;NASMではエラーが出るので修正
    13                                  		GLOBAL	io_cli,io_sti,io_stihlt	;間をあけない
    14                                  		GLOBAL	io_in8,io_in16,io_in32
    15                                  		GLOBAL	io_out8,io_out16,io_out32
    16                                  		GLOBAL	io_load_eflags,io_store_eflags
    17                                  		GLOBAL	load_gdtr,load_idtr
    18                                  		GLOBAL	asm_inthandler21,asm_inthandler27,asm_inthandler2c
    19                                  		EXTERN	inthandler21,inthandler27,inthandler2c
    20                                  
    21                                  
    22                                  
    23                                  ; 以下は実際の関数
    24                                  
    25                                  [SECTION .text]		; オブジェクトファイルではこれを書いてからプログラムを書く
    26                                  
    27                                  io_hlt:	; void io_hlt(void);	; NASMではエラーが出るので修正
    28 00000000 F4                      		HLT
    29 00000001 C3                      		RET
    30                                  
    31                                  io_cli:	; void io_cli(void);	;割り込み禁止
    32 00000002 FA                      		CLI
    33 00000003 C3                      		RET
    34                                  
    35                                  io_sti:	; void io_sti(void);	;割り込み許可
    36 00000004 FB                      		STI
    37 00000005 C3                      		RET
    38                                  
    39                                  io_in8: ; int io_in8(int port);
    40 00000006 8B542404                		MOV		EDX,[ESP+4]		;port
    41 0000000A B800000000              		MOV 	EAX,0
    42 0000000F EC                      		IN 		AL,DX
    43 00000010 C3                      		RET
    44                                  
    45                                  io_in16: ; int io_in16(int port);
    46 00000011 8B542404                		MOV		EDX,[ESP+4]		;port
    47 00000015 B800000000              		MOV 	EAX,0
    48 0000001A EC                      		IN 		AL,DX
    49 0000001B C3                      		RET
    50                                  
    51                                  io_in32: ; int io_in32(int port);
    52 0000001C 8B542404                		MOV		EDX,[ESP+4]		;port
    53 00000020 EC                      		IN 		AL,DX
    54 00000021 C3                      		RET
    55                                  
    56                                  io_out8: ; void io_out8(int port, int data);
    57 00000022 8B542404                		MOV		EDX,[ESP+4] 	;port
    58 00000026 8A442408                		MOV		AL,[ESP+8]		;data
    59 0000002A EE                      		OUT		DX,AL
    60 0000002B C3                      		RET
    61                                  
    62                                  io_out16: ; void io_out16(int port, int data);
    63 0000002C 8B542404                		MOV 	EDX,[ESP+4]		;port
    64 00000030 8B442408                		MOV 	EAX,[ESP+8]		;data
    65 00000034 66EF                    		OUT		DX,AX
    66 00000036 C3                      		RET
    67                                  
    68                                  io_out32: ; void io_out32(int port, int data);
    69 00000037 8B542404                		MOV		EDX,[ESP+4]
    70 0000003B 8B442408                		MOV		EAX,[ESP+8]
    71 0000003F EF                      		OUT		DX,EAX
    72 00000040 C3                      		RET
    73                                  
    74                                  io_load_eflags: ; int io_load_eflags(void);
    75 00000041 9C                      		PUSHFD					; PUSH EFLAGS
    76 00000042 58                      		POP		EAX
    77 00000043 C3                      		RET
    78                                  
    79                                  io_store_eflags: ; void io_store_eflags(int eflags);
    80 00000044 8B442404                		MOV		EAX,[ESP+4]
    81 00000048 50                      		PUSH	EAX
    82 00000049 9D                      		POPFD					;POP EFLAGSという意味
    83 0000004A C3                      		RET
    84                                  
    85                                  load_gdtr:		; void load_gdtr(int limit, int addr);
    86 0000004B 668B442404              		MOV		AX,[ESP+4]		; limit
    87 00000050 6689442406              		MOV		[ESP+6],AX
    88 00000055 0F01542406              		LGDT	[ESP+6]
    89 0000005A C3                      		RET
    90                                  
    91                                  load_idtr:		; void load_idtr(int limit, int addr);
    92 0000005B 668B442404              		MOV		AX,[ESP+4]		; limit
    93 00000060 6689442406              		MOV		[ESP+6],AX
    94 00000065 0F015C2406              		LIDT	[ESP+6]
    95 0000006A C3                      		RET
    96                                  
    97                                  asm_inthandler21:
    98 0000006B 06                      		PUSH	ES
    99 0000006C 1E                      		PUSH	DS
   100 0000006D 60                      		PUSHAD
   101 0000006E 89E0                    		MOV		EAX,ESP
   102 00000070 50                      		PUSH	EAX
   103 00000071 668CD0                  		MOV		AX,SS
   104 00000074 8ED8                    		MOV		DS,AX
   105 00000076 8EC0                    		MOV		ES,AX
   106 00000078 E8(00000000)            		CALL	inthandler21
   107 0000007D 58                      		POP		EAX
   108 0000007E 61                      		POPAD
   109 0000007F 1F                      		POP		DS
   110 00000080 07                      		POP		ES
   111 00000081 CF                      		IRETD
   112                                  
   113                                  asm_inthandler27:
   114 00000082 06                      		PUSH	ES
   115 00000083 1E                      		PUSH	DS
   116 00000084 60                      		PUSHAD
   117 00000085 89E0                    		MOV		EAX,ESP
   118 00000087 50                      		PUSH	EAX
   119 00000088 668CD0                  		MOV		AX,SS
   120 0000008B 8ED8                    		MOV		DS,AX
   121 0000008D 8EC0                    		MOV		ES,AX
   122 0000008F E8(00000000)            		CALL	inthandler27
   123 00000094 58                      		POP		EAX
   124 00000095 61                      		POPAD
   125 00000096 1F                      		POP		DS
   126 00000097 07                      		POP		ES
   127 00000098 CF                      		IRETD
   128                                  
   129                                  asm_inthandler2c:
   130 00000099 06                      		PUSH	ES
   131 0000009A 1E                      		PUSH	DS
   132 0000009B 60                      		PUSHAD
   133 0000009C 89E0                    		MOV		EAX,ESP
   134 0000009E 50                      		PUSH	EAX
   135 0000009F 668CD0                  		MOV		AX,SS
   136 000000A2 8ED8                    		MOV		DS,AX
   137 000000A4 8EC0                    		MOV		ES,AX
   138 000000A6 E8(00000000)            		CALL	inthandler2c
   139 000000AB 58                      		POP		EAX
   140 000000AC 61                      		POPAD
   141 000000AD 1F                      		POP		DS
   142 000000AE 07                      		POP		ES
   143 000000AF CF                      		IRETD
